/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

//prima modifica

import controller.Game;
import controller.Sound;
import controller.Parser;
import java.io.File;
import javax.swing.*;
import controller.Db;
import model.Collector;

/**
 *
 * @author mtridici
 */
public class GameGui extends javax.swing.JFrame {

    private Parser scanner;
    private Db db;
    private String name;
    /**
     * Creates new form GameGui
     */
    public GameGui() {
        initComponents();
        scanner = new Parser();
        db = new Db();
        name = null;
        description();
    }

    public void description() {
    
    Display.append("Hacker\n" +
        "------\n" +
        "\n" +
        "Protagonista del gioco è Nicholas Hathaway (nick), un abile e spregiudicato hacker che si ritrova a scontare una condanna per alcuni reati di pirateria informatica.\n" +
        "Una svolta per lui arriva nel momento in cui l’agente FBI Chen Dawai decide di avvalersi della sua esperienza per una missione altamente complicata. I servizi segreti si trovano infatti a dover fronteggiare una RAT, ovvero un malware in grado di controllare un sistema da remoto scavalcando le autorizzazioni previste. \n" +
        "\n" +
        "Un gruppo di anonimi criminali informatici ha preso il controllo di una centrale nucleare di Hong Kong e del Chicago Mercantile Exange. A patto di un annullamento della pena, Nicholas decide di accettare l’offerta.\n" +
        "\n" +
        "Nicholas dovrà dunque indagare sul misterioso hacker (capo del gruppo anonimo), cercando di scoprirne l’identità prima che questi lanci l'ultimo e definitivo attacco alla centrale nucleare.\n" +
        "Per riuscirci, però, si troverà a dover fare i conti con il caso più complesso in cui si sia mai imbattuto. ");

    }

    public void gameCompleted() {
        Display.setEnabled(false);
        Action.setEnabled(false);
        Esegui.setEnabled(false);
        buttonUP.setEnabled(false);
        buttonDown.setEnabled(false);
        buttonLeft.setEnabled(false);
        buttonRight.setEnabled(false);

        Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/" + Collector.getGame().getCurrentRoom().getImage())));
        Description.setText(Collector.getGame().getCurrentRoom().getName() + "\n\n" + Collector.getGame().getCurrentRoom().getDescription());
        salvaPartita.setEnabled(false);
        Collector.getCrono().setStop();
        Collector.getCrono().calculateScore();

        JFrame photo = new JFrame();
        JOptionPane.showMessageDialog(photo, "Mission Completed! La centrale nucleare è stata salvata in " + Collector.getCrono().getScore() + " secondi.");
        db.createConnection();
        db.insertScore(Collector.getGame().getPlayerName(),Collector.getCrono().getScore());
        db.showScore();
        db.shutdown();
    }

    public void help() {

        JFrame help = new JFrame();
        JOptionPane.showMessageDialog(help, "Lista dei comandi:\n\nsalta, supera, scavalca, sfonda, lancia, colpisci,\naccendi, solleva, riarma, attiva, apri, leggi,\nsfoglia, consulta, inserisci, digita, componi");
        
    }

    public boolean identify() {

        name = JOptionPane.showInputDialog("Inserisci il tuo nome");
        boolean exitCode = false;

        if(name != null) {

            if(name.length() > 10 || name.length() < 3 || name.isEmpty()) {
                JFrame msg = new JFrame();
                JOptionPane.showMessageDialog(msg, "La lunghezza del nome deve essere maggiore di 3 e minore di 10.");
                exitCode = false;
            }
            else {
                //Collector.getGame().setPlayerName(name);
                exitCode = true;
            }        
        }
        return exitCode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Display = new javax.swing.JTextArea();
        Esegui = new javax.swing.JButton();
        Action = new javax.swing.JTextField();
        Viewer = new javax.swing.JLabel();
        buttonUP = new javax.swing.JButton();
        buttonDown = new javax.swing.JButton();
        buttonLeft = new javax.swing.JButton();
        buttonRight = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Description = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        Hacker = new javax.swing.JMenu();
        nuovaPartita = new javax.swing.JMenuItem();
        caricaPartita = new javax.swing.JMenuItem();
        salvaPartita = new javax.swing.JMenuItem();
        Esci = new javax.swing.JMenuItem();
        ranking = new javax.swing.JMenu();
        top5 = new javax.swing.JMenuItem();
        Options = new javax.swing.JMenu();
        musicON = new javax.swing.JMenuItem();
        musicOFF = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        cmdList = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        Display.setEditable(false);
        Display.setColumns(20);
        Display.setLineWrap(true);
        Display.setRows(5);
        Display.setWrapStyleWord(true);
        jScrollPane1.setViewportView(Display);

        Esegui.setText("Esegui");
        Esegui.setEnabled(false);
        Esegui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EseguiActionPerformed(evt);
            }
        });

        Action.setEnabled(false);
        Action.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionActionPerformed(evt);
            }
        });

        Viewer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover.jpg"))); // NOI18N
        Viewer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        buttonUP.setText("SU");
        buttonUP.setEnabled(false);
        buttonUP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUPActionPerformed(evt);
            }
        });

        buttonDown.setText("GIU");
        buttonDown.setEnabled(false);
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownActionPerformed(evt);
            }
        });

        buttonLeft.setText("SX");
        buttonLeft.setEnabled(false);
        buttonLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLeftActionPerformed(evt);
            }
        });

        buttonRight.setText("DX");
        buttonRight.setEnabled(false);
        buttonRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRightActionPerformed(evt);
            }
        });

        Description.setEditable(false);
        Description.setColumns(20);
        Description.setLineWrap(true);
        Description.setRows(5);
        Description.setWrapStyleWord(true);
        jScrollPane2.setViewportView(Description);

        Hacker.setText("Hacker");

        nuovaPartita.setText("Nuova Partita");
        nuovaPartita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovaPartitaActionPerformed(evt);
            }
        });
        Hacker.add(nuovaPartita);

        caricaPartita.setText("Carica Partita");
        caricaPartita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caricaPartitaActionPerformed(evt);
            }
        });
        Hacker.add(caricaPartita);

        salvaPartita.setText("Salva Partita");
        salvaPartita.setEnabled(false);
        salvaPartita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaPartitaActionPerformed(evt);
            }
        });
        Hacker.add(salvaPartita);

        Esci.setText("Esci");
        Esci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EsciActionPerformed(evt);
            }
        });
        Hacker.add(Esci);

        MenuBar.add(Hacker);

        ranking.setText("Classifica");

        top5.setText("Top5");
        top5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                top5ActionPerformed(evt);
            }
        });
        ranking.add(top5);

        MenuBar.add(ranking);

        Options.setText("Opzioni");

        musicON.setText("Musica ON");
        musicON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicONActionPerformed(evt);
            }
        });
        Options.add(musicON);

        musicOFF.setText("Musica OFF");
        musicOFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicOFFActionPerformed(evt);
            }
        });
        Options.add(musicOFF);

        MenuBar.add(Options);

        Help.setText("Help");

        cmdList.setText("Comandi");
        cmdList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdListActionPerformed(evt);
            }
        });
        Help.add(cmdList);

        MenuBar.add(Help);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Action)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Esegui))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Viewer, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(32, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonUP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRight, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Viewer, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Action, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Esegui)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonUP, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(buttonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonRight, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuovaPartitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovaPartitaActionPerformed
        if(identify()) {
            buttonUP.setEnabled(true);
            buttonDown.setEnabled(true);
            buttonLeft.setEnabled(true);
            buttonRight.setEnabled(true);
            Display.setText(null);
            Action.setEnabled(true);
            Esegui.setEnabled(true);

            Collector.setGame(new Game());
            Collector.getGame().setPlayerName(name);
            
            Description.setText(Collector.getGame().getCurrentRoom().getName() + "\n\n" + Collector.getGame().getCurrentRoom().getDescription());
            Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/" + Collector.getGame().getCurrentRoom().getImage())));
            salvaPartita.setEnabled(true);
            Collector.getCrono().setStart();
        }
    }//GEN-LAST:event_nuovaPartitaActionPerformed

    private void caricaPartitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caricaPartitaActionPerformed
        try {

            // parent component of the dialog
            JFrame parentFrame = new JFrame();

            JFileChooser fileChooser = new JFileChooser();
            File currentDir = new File(System.getProperty("user.dir"));
            fileChooser.setCurrentDirectory(currentDir);
            fileChooser.setDialogTitle("Specify a file to load");   

            int userSelection = fileChooser.showOpenDialog(parentFrame);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToLoad = fileChooser.getSelectedFile();
                Collector.getGame().load(fileToLoad.getAbsolutePath());

                buttonUP.setEnabled(true);
                buttonDown.setEnabled(true);
                buttonLeft.setEnabled(true);
                buttonRight.setEnabled(true);
                Display.setText(null);
                Action.setEnabled(true);
                Esegui.setEnabled(true);

                Display.setText(Collector.getGame().getHistory());

                Description.setText(Collector.getGame().getCurrentRoom().getName() + "\n\n" + Collector.getGame().getCurrentRoom().getDescription());
                Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/" + Collector.getGame().getCurrentRoom().getImage())));
                salvaPartita.setEnabled(true);
                Collector.getCrono().setResumed();
                Collector.getCrono().setStart();

            }

        }
        catch (Exception e) {
            System.out.println("Errore lettura file.");
        }
    }//GEN-LAST:event_caricaPartitaActionPerformed

    private void EsciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EsciActionPerformed
        Collector.getCrono().setStop();
        System.exit(0); //ordispose();
    }//GEN-LAST:event_EsciActionPerformed

    private void EseguiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EseguiActionPerformed
       if(!(Action.getText().isEmpty())) {
        Display.append("Tu: " + Action.getText() + "\n");
        if(!Collector.getGame().getCurrentRebus().getRebus().isSolved()) {
            if(scanner.checkUserCommand(Action.getText(),Collector.getGame().getCurrentRebus(),Collector.getGame().getCurrentRoom()) == 0) {
                Display.append("Navigator: " + Collector.getGame().getCurrentRebus().getRebus().getRebusFeedback());  
                Collector.getGame().getCurrentRebus().getRebus().setSolved(true);
                Collector.getGame().setNextRebus();
                if(Collector.getGame().isCompleted(Collector.getGame().getCurrentRebus().getRebus()))
                    gameCompleted();
                
            }
            else {
                Display.append("Navigator: " + "Mmmhh,  non ci siamo. Riprovaci."); 
            }
        }
        else {
        Display.append("Navigator: " + "Non ho capito."); 
        }
        Display.append("\n");
        Action.setText(null);
      }
    }//GEN-LAST:event_EseguiActionPerformed

    private void ActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionActionPerformed
       if(!(Action.getText().isEmpty())) {
        Display.append("Tu: " + Action.getText() + "\n");
        if(!Collector.getGame().getCurrentRebus().getRebus().isSolved()) {
            if(scanner.checkUserCommand(Action.getText(),Collector.getGame().getCurrentRebus(),Collector.getGame().getCurrentRoom()) == 0) {
                Display.append("Navigator: " + Collector.getGame().getCurrentRebus().getRebus().getRebusFeedback());
                Collector.getGame().getCurrentRebus().getRebus().setSolved(true);
                Collector.getGame().setNextRebus();
                if(Collector.getGame().isCompleted(Collector.getGame().getCurrentRebus().getRebus()))
                    gameCompleted();
            }
            else {
                Display.append("Navigator: " + "Mmmhh,  non ci siamo. Riprovaci."); 
            }
        }
        else {
        Display.append("Navigator: " + "Non ho capito"); 
        }
        Display.append("\n");
        Action.setText(null);
      }        // TODO add your handling code here:
    }//GEN-LAST:event_ActionActionPerformed

    private void buttonUPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUPActionPerformed
        if(Collector.getGame().getCurrentRoom().getNorth()!=null && Collector.getGame().getCurrentRoom().getNorth().isAccessible()==true) {
            Collector.getGame().setNextRebus();
            if(Collector.getGame().getCurrentRoom().getNorth().isVisible() == false) {
                //Collector.getGame().setNextRebus();
                Display.append("Navigator: " + "Mi dispiace, ma c'è poca luce per andare avanti.\n");          
            }
            else {
            Collector.getGame().setCurrentRoom(Collector.getGame().getCurrentRoom().getNorth());
            Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/" + Collector.getGame().getCurrentRoom().getImage())));
            Description.setText(Collector.getGame().getCurrentRoom().getName() + "\n\n" + Collector.getGame().getCurrentRoom().getDescription());
            }
        }
        else {
            if(Collector.getGame().getCurrentRoom().getNorth()==null){
                Display.append("Navigator: " + "Niente di interessante. Cambia direzione.\n");
            }
            if(Collector.getGame().getCurrentRoom().getNorth()!=null && Collector.getGame().getCurrentRoom().getNorth().isAccessible()==false){
                Collector.getGame().setNextRebus();
                Display.append("Navigator: Risolvi il rebus per andare avanti.\n");
            }
        }
            
    }//GEN-LAST:event_buttonUPActionPerformed

    private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
        if(Collector.getGame().getCurrentRoom().getSouth()!=null && Collector.getGame().getCurrentRoom().getSouth().isAccessible()==true) {
            Collector.getGame().setNextRebus();
            if(Collector.getGame().getCurrentRoom().getSouth().isVisible() == false) {
                //Collector.getGame().setNextRebus();
                Display.append("Navigator: " + "Mi dispiace, ma c'è poca luce per andare avanti.\n");            
            }
            else {
            Collector.getGame().setCurrentRoom(Collector.getGame().getCurrentRoom().getSouth());
            Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/" + Collector.getGame().getCurrentRoom().getImage())));
            Description.setText(Collector.getGame().getCurrentRoom().getName() + "\n\n" + Collector.getGame().getCurrentRoom().getDescription());
            }
        }
        else {
            if(Collector.getGame().getCurrentRoom().getSouth()==null){
                Display.append("Navigator: " + "Niente di interessante. Cambia direzione.\n");
            }
            if(Collector.getGame().getCurrentRoom().getSouth()!=null && Collector.getGame().getCurrentRoom().getSouth().isAccessible()==false){
                Collector.getGame().setNextRebus();
                Display.append("Navigator: Risolvi il rebus per andare avanti.\n");
            }
        }
    }//GEN-LAST:event_buttonDownActionPerformed

    private void buttonLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeftActionPerformed
        if(Collector.getGame().getCurrentRoom().getWest()!=null && Collector.getGame().getCurrentRoom().getWest().isAccessible()==true) {
            Collector.getGame().setNextRebus();
            if(Collector.getGame().getCurrentRoom().getWest().isVisible() == false) {
                //Collector.getGame().setNextRebus();
                Display.append("Navigator: " + "Mi dispiace, ma c'è poca luce per andare avanti.\n");            
            }
            else {
            Collector.getGame().setCurrentRoom(Collector.getGame().getCurrentRoom().getWest());
            Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/" + Collector.getGame().getCurrentRoom().getImage())));
            Description.setText(Collector.getGame().getCurrentRoom().getName() + "\n\n" + Collector.getGame().getCurrentRoom().getDescription());
            }
        }
        else {
            if(Collector.getGame().getCurrentRoom().getWest()==null){
                Display.append("Navigator: " + "Niente di interessante. Cambia direzione.\n");
            }
            if(Collector.getGame().getCurrentRoom().getWest()!=null && Collector.getGame().getCurrentRoom().getWest().isAccessible()==false){
                Collector.getGame().setNextRebus();
                Display.append("Navigator: Risolvi il rebus per andare avanti.\n");
            }
        }
    }//GEN-LAST:event_buttonLeftActionPerformed

    private void buttonRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRightActionPerformed
        if(Collector.getGame().getCurrentRoom().getEast()!=null && Collector.getGame().getCurrentRoom().getEast().isAccessible()==true) {
            Collector.getGame().setNextRebus();
            if(Collector.getGame().getCurrentRoom().getEast().isVisible() == false) {
                //Collector.getGame().setNextRebus();
                Display.append("Navigator: " + "Mi dispiace, ma c'è poca luce per andare avanti.\n");            
            }
            else {
            Collector.getGame().setCurrentRoom(Collector.getGame().getCurrentRoom().getEast());
            Viewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/" + Collector.getGame().getCurrentRoom().getImage())));
            Description.setText(Collector.getGame().getCurrentRoom().getName() + "\n\n" + Collector.getGame().getCurrentRoom().getDescription());
            }
        }
        else {
            if( Collector.getGame().getCurrentRoom().getEast()==null){
                Display.append("Navigator: " + "Niente di interessante. Cambia direzione.\n");
            }
            if(Collector.getGame().getCurrentRoom().getEast()!=null && Collector.getGame().getCurrentRoom().getEast().isAccessible()==false) {
                Collector.getGame().setNextRebus();
                Display.append("Navigator: Risolvi il rebus per andare avanti.\n");
            }
        }
    }//GEN-LAST:event_buttonRightActionPerformed

    private void musicONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicONActionPerformed
        Thread musicThread = new Thread(music);
        musicThread.start();
    }//GEN-LAST:event_musicONActionPerformed

    private void musicOFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicOFFActionPerformed
        this.music.stop();
    }//GEN-LAST:event_musicOFFActionPerformed

    private void cmdListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdListActionPerformed
        help();
    }//GEN-LAST:event_cmdListActionPerformed

    private void salvaPartitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaPartitaActionPerformed
       
        try {
            UIManager.put("FileChooser.saveButtonText","Save & Exit");
            // parent component of the dialog
            JFrame parentFrame = new JFrame();

            JFileChooser fileChooser = new JFileChooser();
            File currentDir = new File(System.getProperty("user.dir"));
            fileChooser.setCurrentDirectory(currentDir);
            fileChooser.setDialogTitle("Specify a file to save");   
            fileChooser.setApproveButtonText("Save & Exit");

            int userSelection = fileChooser.showSaveDialog(parentFrame);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                Collector.getCrono().setStop();
                Collector.getCrono().calculateScore();
                Collector.getGame().setHistory(Display.getText());

                File fileToSave = fileChooser.getSelectedFile();
                Collector.getGame().save(fileToSave.getAbsolutePath());
                System.exit(0);
            }
        }
        catch (Exception e) {
            System.out.println("Errore scrittura file.");
        }

    }//GEN-LAST:event_salvaPartitaActionPerformed

    private void top5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_top5ActionPerformed
        db.createConnection();
        db.showScore();
        db.shutdown();
    }//GEN-LAST:event_top5ActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Action;
    private javax.swing.JTextArea Description;
    private javax.swing.JTextArea Display;
    private javax.swing.JMenuItem Esci;
    private javax.swing.JButton Esegui;
    private javax.swing.JMenu Hacker;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu Options;
    private javax.swing.JLabel Viewer;
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonLeft;
    private javax.swing.JButton buttonRight;
    private javax.swing.JButton buttonUP;
    private javax.swing.JMenuItem caricaPartita;
    private javax.swing.JMenuItem cmdList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem musicOFF;
    private javax.swing.JMenuItem musicON;
    private javax.swing.JMenuItem nuovaPartita;
    private javax.swing.JMenu ranking;
    private javax.swing.JMenuItem salvaPartita;
    private javax.swing.JMenuItem top5;
    // End of variables declaration//GEN-END:variables
    private final Sound music = new Sound();
}
